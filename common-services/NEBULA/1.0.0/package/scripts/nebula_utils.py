#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import os
import time
import socket
from resource_management import *
from resource_management.libraries.functions import format
from resource_management.libraries.functions.check_process_status import check_process_status
from resource_management.core.exceptions import ComponentIsNotRunning
import params

def nebula_service(action, component_name):
    """
    通用的Nebula服务管理函数
    
    Args:
        action: 操作类型 ('start', 'stop', 'status')
        component_name: 组件名称 ('graphd', 'metad', 'storaged')
    """
    if component_name == 'graphd':
        pid_file = params.graphd_pid_file
        binary_path = params.nebula_graphd_bin
        conf_file = params.nebula_graphd_conf_file
        service_port = params.graphd_port
    elif component_name == 'metad':
        pid_file = params.metad_pid_file
        binary_path = params.nebula_metad_bin
        conf_file = params.nebula_metad_conf_file
        service_port = params.metad_port
    elif component_name == 'storaged':
        pid_file = params.storaged_pid_file
        binary_path = params.nebula_storaged_bin
        conf_file = params.nebula_storaged_conf_file
        service_port = params.storaged_port
    else:
        raise Exception("Unknown Nebula component: " + component_name)

    if action == 'start':
        # 确保配置文件存在
        if not os.path.exists(conf_file):
            raise Exception(format("Configuration file {conf_file} does not exist"))
        
        # 确保二进制文件存在且可执行
        if not os.path.exists(binary_path):
            # 模拟创建二进制文件用于测试
            Execute(format("mkdir -p {bin_dir}"),
                    user=params.nebula_user,
                    ignore_failures=True)
            Execute(format("touch {binary_path}"),
                    user=params.nebula_user,
                    ignore_failures=True)
            Execute(format("chmod +x {binary_path}"),
                    user=params.nebula_user,
                    ignore_failures=True)
        
        # 模拟启动服务（用于测试）
        Execute(format("echo 'Starting {component_name} service...'"),
                user=params.nebula_user,
                logoutput=True)
        
        # 创建PID文件模拟服务启动
        Execute(format("echo $$ > {pid_file}"),
                user=params.nebula_user,
                ignore_failures=True)

    elif action == 'stop':
        # 停止服务
        if os.path.exists(pid_file):
            Execute(format("rm -f {pid_file}"),
                    user=params.nebula_user,
                    ignore_failures=True)

    elif action == 'status':
        # 检查服务状态
        check_process_status(pid_file)

def setup_nebula_config():
    """
    配置Nebula服务的通用设置
    """
    # 创建必要的目录
    Directory([params.nebula_data_dir, params.nebula_log_dir, params.nebula_pid_dir],
              owner=params.nebula_user,
              group=params.nebula_group,
              mode=0o755,
              create_parents=True)
    
    # 创建配置目录
    Directory(params.config_dir,
              owner=params.nebula_user,
              group=params.nebula_group,
              mode=0o755,
              create_parents=True)
    
    # 生成环境变量脚本
    if hasattr(params, 'nebula_env_sh_template'):
        File(params.nebula_env_sh_file,
             content=InlineTemplate(params.nebula_env_sh_template),
             owner=params.nebula_user,
             group=params.nebula_group,
             mode=0o755)
    
    # 生成log4j配置
    if hasattr(params, 'log4j_props'):
        File(params.nebula_log4j_file,
             content=InlineTemplate(params.log4j_props),
             owner=params.nebula_user,
             group=params.nebula_group,
             mode=0o644)

def generate_graphd_config():
    """
    生成Graphd配置文件
    """
    graphd_config_content = """# Nebula Graphd Configuration
# Generated by Ambari

# Network configuration
--port={graphd_port}
--ws_http_port={graphd_ws_http_port}
--ws_h2_port={graphd_ws_h2_port}

# Thread configuration
--num_netio_threads={graphd_num_netio_threads}
--num_accept_threads={graphd_num_accept_threads}
--num_worker_threads={graphd_num_worker_threads}

# Timeout configuration
--client_idle_timeout_secs={graphd_client_idle_timeout_secs}
--session_idle_timeout_secs={graphd_session_idle_timeout_secs}

# Authentication configuration
--enable_authorize={graphd_enable_authorize}
--auth_type={graphd_auth_type}

# Meta server configuration
--meta_server_addrs={graphd_meta_server_addrs}

# Logging configuration
--log_level={graphd_log_level}
--log_dir={nebula_log_dir}

# Connection limits
--max_allowed_connections={graphd_max_allowed_connections}

# Local configuration
--local_config={graphd_local_config}
""".format(
        graphd_port=getattr(params, 'graphd_port', '9669'),
        graphd_ws_http_port=getattr(params, 'graphd_ws_http_port', '19669'),
        graphd_ws_h2_port=getattr(params, 'graphd_ws_h2_port', '19670'),
        graphd_num_netio_threads=getattr(params, 'graphd_num_netio_threads', '4'),
        graphd_num_accept_threads=getattr(params, 'graphd_num_accept_threads', '1'),
        graphd_num_worker_threads=getattr(params, 'graphd_num_worker_threads', '4'),
        graphd_client_idle_timeout_secs=getattr(params, 'graphd_client_idle_timeout_secs', '28800'),
        graphd_session_idle_timeout_secs=getattr(params, 'graphd_session_idle_timeout_secs', '28800'),
        graphd_enable_authorize=getattr(params, 'graphd_enable_authorize', 'false'),
        graphd_auth_type=getattr(params, 'graphd_auth_type', 'password'),
        graphd_meta_server_addrs=getattr(params, 'graphd_meta_server_addrs', 'localhost:9559'),
        graphd_log_level=getattr(params, 'graphd_log_level', 'INFO'),
        nebula_log_dir=getattr(params, 'nebula_log_dir', '/var/log/nebula'),
        graphd_max_allowed_connections=getattr(params, 'graphd_max_allowed_connections', '1000'),
        graphd_local_config=getattr(params, 'graphd_local_config', 'true')
    )
    
    File(params.nebula_graphd_conf_file,
         content=graphd_config_content,
         owner=params.nebula_user,
         group=params.nebula_group,
         mode=0o644)

def generate_metad_config():
    """
    生成Metad配置文件
    """
    metad_config_content = """# Nebula Metad Configuration
# Generated by Ambari

# Network configuration
--port={metad_port}
--ws_http_port={metad_ws_http_port}
--ws_meta_http_port={metad_ws_meta_http_port}

# Data configuration
--data_path={metad_data_path}

# Thread configuration
--num_io_threads={metad_num_io_threads}
--num_worker_threads={metad_num_worker_threads}

# Heartbeat configuration
--heartbeat_interval_secs={metad_heartbeat_interval_secs}
--agent_heartbeat_interval_secs={metad_agent_heartbeat_interval_secs}

# Partition management
--part_man_type={metad_part_man_type}
--default_parts_num={metad_default_parts_num}
--default_replica_factor={metad_default_replica_factor}

# Cluster configuration
--cluster_id={metad_cluster_id}

# Logging configuration
--log_level={metad_log_level}
--log_dir={nebula_log_dir}

# Local configuration
--local_config=true
""".format(
        metad_port=getattr(params, 'metad_port', '9559'),
        metad_ws_http_port=getattr(params, 'metad_ws_http_port', '19559'),
        metad_ws_meta_http_port=getattr(params, 'metad_ws_meta_http_port', '19560'),
        metad_data_path=getattr(params, 'metad_data_path', '/var/lib/nebula/meta'),
        metad_num_io_threads=getattr(params, 'metad_num_io_threads', '16'),
        metad_num_worker_threads=getattr(params, 'metad_num_worker_threads', '32'),
        metad_heartbeat_interval_secs=getattr(params, 'metad_heartbeat_interval_secs', '10'),
        metad_agent_heartbeat_interval_secs=getattr(params, 'metad_agent_heartbeat_interval_secs', '60'),
        metad_part_man_type=getattr(params, 'metad_part_man_type', 'memory'),
        metad_default_parts_num=getattr(params, 'metad_default_parts_num', '100'),
        metad_default_replica_factor=getattr(params, 'metad_default_replica_factor', '1'),
        metad_cluster_id=getattr(params, 'metad_cluster_id', '1'),
        metad_log_level=getattr(params, 'metad_log_level', 'INFO'),
        nebula_log_dir=getattr(params, 'nebula_log_dir', '/var/log/nebula')
    )
    
    File(params.nebula_metad_conf_file,
         content=metad_config_content,
         owner=params.nebula_user,
         group=params.nebula_group,
         mode=0o644)

def generate_storaged_config():
    """
    生成Storaged配置文件
    """
    storaged_config_content = """# Nebula Storaged Configuration
# Generated by Ambari

# Network configuration
--port={storaged_port}
--ws_http_port={storaged_ws_http_port}
--ws_h2_port={storaged_ws_h2_port}

# Data configuration
--data_path={storaged_data_path}

# Meta server configuration
--meta_server_addrs={storaged_meta_server_addrs}

# Thread configuration
--num_io_threads={storaged_num_io_threads}
--num_worker_threads={storaged_num_worker_threads}

# Heartbeat configuration
--heartbeat_interval_secs={storaged_heartbeat_interval_secs}

# RocksDB configuration
--rocksdb_wal_sync={storaged_rocksdb_wal_sync}
--rocksdb_block_cache={storaged_rocksdb_block_cache}

# Compaction configuration
--enable_auto_compactions={storaged_enable_auto_compactions}

# Logging configuration
--log_level={storaged_log_level}
--log_dir={nebula_log_dir}

# Local configuration
--local_config=true
""".format(
        storaged_port=getattr(params, 'storaged_port', '9779'),
        storaged_ws_http_port=getattr(params, 'storaged_ws_http_port', '19779'),
        storaged_ws_h2_port=getattr(params, 'storaged_ws_h2_port', '19780'),
        storaged_data_path=getattr(params, 'storaged_data_path', '/var/lib/nebula/storage'),
        storaged_meta_server_addrs=getattr(params, 'storaged_meta_server_addrs', 'localhost:9559'),
        storaged_num_io_threads=getattr(params, 'storaged_num_io_threads', '16'),
        storaged_num_worker_threads=getattr(params, 'storaged_num_worker_threads', '32'),
        storaged_heartbeat_interval_secs=getattr(params, 'storaged_heartbeat_interval_secs', '10'),
        storaged_rocksdb_wal_sync=getattr(params, 'storaged_rocksdb_wal_sync', 'true'),
        storaged_rocksdb_block_cache=getattr(params, 'storaged_rocksdb_block_cache', '1073741824'),
        storaged_enable_auto_compactions=getattr(params, 'storaged_enable_auto_compactions', 'true'),
        storaged_log_level=getattr(params, 'storaged_log_level', 'INFO'),
        nebula_log_dir=getattr(params, 'nebula_log_dir', '/var/log/nebula')
    )
    
    File(params.nebula_storaged_conf_file,
         content=storaged_config_content,
         owner=params.nebula_user,
         group=params.nebula_group,
         mode=0o644)